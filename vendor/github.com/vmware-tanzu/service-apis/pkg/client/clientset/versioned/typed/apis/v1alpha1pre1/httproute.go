/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1pre1

import (
	"time"

	v1alpha1pre1 "github.com/vmware-tanzu/service-apis/apis/v1alpha1pre1"
	scheme "github.com/vmware-tanzu/service-apis/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// HTTPRoutesGetter has a method to return a HTTPRouteInterface.
// A group's client should implement this interface.
type HTTPRoutesGetter interface {
	HTTPRoutes(namespace string) HTTPRouteInterface
}

// HTTPRouteInterface has methods to work with HTTPRoute resources.
type HTTPRouteInterface interface {
	Create(*v1alpha1pre1.HTTPRoute) (*v1alpha1pre1.HTTPRoute, error)
	Update(*v1alpha1pre1.HTTPRoute) (*v1alpha1pre1.HTTPRoute, error)
	UpdateStatus(*v1alpha1pre1.HTTPRoute) (*v1alpha1pre1.HTTPRoute, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1pre1.HTTPRoute, error)
	List(opts v1.ListOptions) (*v1alpha1pre1.HTTPRouteList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1pre1.HTTPRoute, err error)
	HTTPRouteExpansion
}

// hTTPRoutes implements HTTPRouteInterface
type hTTPRoutes struct {
	client rest.Interface
	ns     string
}

// newHTTPRoutes returns a HTTPRoutes
func newHTTPRoutes(c *NetworkingV1alpha1pre1Client, namespace string) *hTTPRoutes {
	return &hTTPRoutes{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the hTTPRoute, and returns the corresponding hTTPRoute object, and an error if there is any.
func (c *hTTPRoutes) Get(name string, options v1.GetOptions) (result *v1alpha1pre1.HTTPRoute, err error) {
	result = &v1alpha1pre1.HTTPRoute{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("httproutes").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of HTTPRoutes that match those selectors.
func (c *hTTPRoutes) List(opts v1.ListOptions) (result *v1alpha1pre1.HTTPRouteList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1pre1.HTTPRouteList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("httproutes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested hTTPRoutes.
func (c *hTTPRoutes) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("httproutes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a hTTPRoute and creates it.  Returns the server's representation of the hTTPRoute, and an error, if there is any.
func (c *hTTPRoutes) Create(hTTPRoute *v1alpha1pre1.HTTPRoute) (result *v1alpha1pre1.HTTPRoute, err error) {
	result = &v1alpha1pre1.HTTPRoute{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("httproutes").
		Body(hTTPRoute).
		Do().
		Into(result)
	return
}

// Update takes the representation of a hTTPRoute and updates it. Returns the server's representation of the hTTPRoute, and an error, if there is any.
func (c *hTTPRoutes) Update(hTTPRoute *v1alpha1pre1.HTTPRoute) (result *v1alpha1pre1.HTTPRoute, err error) {
	result = &v1alpha1pre1.HTTPRoute{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("httproutes").
		Name(hTTPRoute.Name).
		Body(hTTPRoute).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *hTTPRoutes) UpdateStatus(hTTPRoute *v1alpha1pre1.HTTPRoute) (result *v1alpha1pre1.HTTPRoute, err error) {
	result = &v1alpha1pre1.HTTPRoute{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("httproutes").
		Name(hTTPRoute.Name).
		SubResource("status").
		Body(hTTPRoute).
		Do().
		Into(result)
	return
}

// Delete takes name of the hTTPRoute and deletes it. Returns an error if one occurs.
func (c *hTTPRoutes) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("httproutes").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *hTTPRoutes) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("httproutes").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched hTTPRoute.
func (c *hTTPRoutes) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1pre1.HTTPRoute, err error) {
	result = &v1alpha1pre1.HTTPRoute{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("httproutes").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
